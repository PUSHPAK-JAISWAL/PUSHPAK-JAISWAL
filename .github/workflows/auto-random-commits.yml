name: Hidden Random PRs -> Approve (you) -> Merge -> Delete

on:
  schedule:
    # daily at 00:00 UTC by default — change to your preferred cron
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      merge_delay_seconds:
        description: 'Seconds to wait AFTER creating each PR before merging it'
        required: false
        default: '30'
      pr_interval_seconds:
        description: 'Seconds to wait between processing successive PRs'
        required: false
        default: '10'
      num_lines:
        description: 'Number of fixed lines in test file (keeps file size constant)'
        required: false
        default: '100'
      min_commits:
        description: 'Minimum number of commits/PRs (random)'
        required: false
        default: '1'
      max_commits:
        description: 'Maximum number of commits/PRs (random)'
        required: false
        default: '5'
      target_base_branch:
        description: 'Branch to receive these automated merges (keeps main untouched)'
        required: false
        default: 'automation-hidden'

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: hidden-random-prs-${{ github.repository }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TEST_FILE: test.txt
      GITHUB_API: https://api.github.com
    steps:
      - name: Checkout repo (full) using PAT for push permissions
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.USER_PAT }}

      - name: Setup git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Read inputs and set outputs
        id: inputs
        run: |
          set -euo pipefail
          MERGE_DELAY=${{ github.event.inputs.merge_delay_seconds || '30' }}
          PR_INTERVAL=${{ github.event.inputs.pr_interval_seconds || '10' }}
          NUM_LINES=${{ github.event.inputs.num_lines || '100' }}
          MIN_C=${{ github.event.inputs.min_commits || '1' }}
          MAX_C=${{ github.event.inputs.max_commits || '5' }}
          TARGET_BRANCH=${{ github.event.inputs.target_base_branch || 'automation-hidden' }}

          echo "merge_delay=$MERGE_DELAY" >> $GITHUB_OUTPUT
          echo "pr_interval=$PR_INTERVAL" >> $GITHUB_OUTPUT
          echo "num_lines=$NUM_LINES" >> $GITHUB_OUTPUT
          echo "min_commits=$MIN_C" >> $GITHUB_OUTPUT
          echo "max_commits=$MAX_C" >> $GITHUB_OUTPUT
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT

      - name: Determine repo info
        id: repoinfo
        run: |
          echo "owner=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          echo "repo=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          # find default branch
          DEFAULT_BRANCH=$(git remote show origin | awk -F': ' '/HEAD branch/ {print $2}')
          if [ -z "$DEFAULT_BRANCH" ]; then DEFAULT_BRANCH="main"; fi
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

      - name: Ensure target base branch exists and contains the fixed test file
        env:
          USER_PAT: ${{ secrets.USER_PAT }}
        run: |
          set -euo pipefail
          OWNER=${{ steps.repoinfo.outputs.owner }}
          REPO=${{ steps.repoinfo.outputs.repo }}
          DEFAULT_BRANCH=${{ steps.repoinfo.outputs.default_branch }}
          TARGET_BRANCH=${{ steps.inputs.outputs.target_branch }}
          NUM_LINES=${{ steps.inputs.outputs.num_lines }}
          FILE="${{ env.TEST_FILE }}"

          # fetch remote refs
          git fetch origin --prune

          # check if target branch exists remotely
          if git ls-remote --heads origin "$TARGET_BRANCH" | grep -q refs/heads; then
            echo "Target branch '$TARGET_BRANCH' exists remotely. Checking out..."
            git checkout "$TARGET_BRANCH"
            git pull origin "$TARGET_BRANCH" --ff-only || true
          else
            echo "Target branch '$TARGET_BRANCH' does not exist. Creating from default branch '$DEFAULT_BRANCH'..."
            # ensure we have DEFAULT_BRANCH locally
            git fetch origin "$DEFAULT_BRANCH":"$DEFAULT_BRANCH" --depth=1 || true
            git checkout -b "$TARGET_BRANCH" "origin/$DEFAULT_BRANCH" || git checkout -b "$TARGET_BRANCH"
            # push new branch
            git push "https://${USER_PAT}@github.com/${OWNER}/${REPO}.git" "$TARGET_BRANCH" -q
          fi

          # Ensure FILE exists on target branch and has NUM_LINES exact lines (pad/truncate)
          if [ ! -f "$FILE" ]; then
            echo "Creating $FILE with $NUM_LINES lines on $TARGET_BRANCH..."
            seq 1 $NUM_LINES | awk '{printf "Line %04d: placeholder\n", $0}' > "$FILE"
            git add "$FILE"
            git commit -m "chore: create $FILE with $NUM_LINES lines (initial)" || true
            git push "https://${USER_PAT}@github.com/${OWNER}/${REPO}.git" "$TARGET_BRANCH" -q || true
          else
            LINES_CURRENT=$(wc -l < "$FILE" || echo 0)
            if [ "$LINES_CURRENT" -lt "$NUM_LINES" ]; then
              seq $((LINES_CURRENT+1)) $NUM_LINES | awk '{printf "Line %04d: placeholder\n", $0}' >> "$FILE"
              git add "$FILE"
              git commit -m "chore: pad $FILE to ${NUM_LINES} lines" || true
              git push "https://${USER_PAT}@github.com/${OWNER}/${REPO}.git" "$TARGET_BRANCH" -q || true
            elif [ "$LINES_CURRENT" -gt "$NUM_LINES" ]; then
              head -n "$NUM_LINES" "$FILE" > "$FILE.tmp"
              mv "$FILE.tmp" "$FILE"
              git add "$FILE"
              git commit -m "chore: truncate $FILE to ${NUM_LINES} lines" || true
              git push "https://${USER_PAT}@github.com/${OWNER}/${REPO}.git" "$TARGET_BRANCH" -q || true
            else
              echo "$FILE already has $NUM_LINES lines on $TARGET_BRANCH."
            fi
          fi

      - name: Create N branches each with 1 commit -> PR -> approve (you) -> merge -> delete
        env:
          REPO_OWNER: ${{ steps.repoinfo.outputs.owner }}
          REPO_NAME: ${{ steps.repoinfo.outputs.repo }}
          USER_PAT: ${{ secrets.USER_PAT }}
        run: |
          set -euo pipefail
          TARGET_BRANCH=${{ steps.inputs.outputs.target_branch }}
          MIN_C=${{ steps.inputs.outputs.min_commits }}
          MAX_C=${{ steps.inputs.outputs.max_commits }}
          NUM_LINES=${{ steps.inputs.outputs.num_lines }}
          MERGE_DELAY=${{ steps.inputs.outputs.merge_delay }}
          PR_INTERVAL=${{ steps.inputs.outputs.pr_interval }}
          FILE="${{ env.TEST_FILE }}"
          OWNER="${REPO_OWNER}"
          REPO="${REPO_NAME}"
          API="${{ env.GITHUB_API }}"

          # compute random count between min and max using /dev/urandom
          RANGE=$((MAX_C - MIN_C + 1))
          if [ "$RANGE" -le 0 ]; then
            COUNT=$MIN_C
          else
            RANDBYTE=$(od -An -N2 -tu2 /dev/urandom | tr -d ' ')
            COUNT=$(( (RANDBYTE % RANGE) + MIN_C ))
          fi
          echo "Creating $COUNT one-commit PR(s) into $TARGET_BRANCH."

          for i in $(seq 1 $COUNT); do
            TS=$(date -u +"%Y%m%dT%H%M%SZ")
            BRANCH="auto/hidden-pr-${TS}-${i}-$((RANDOM % 10000))"

            # make branch from target branch
            git fetch origin "$TARGET_BRANCH":"$TARGET_BRANCH" --depth=1 || true
            git checkout -b "$BRANCH" "origin/${TARGET_BRANCH}" || git checkout -b "$BRANCH"

            # choose random line to replace (1..NUM_LINES)
            RANDLINE=$(( (RANDOM % NUM_LINES) + 1 ))
            NEW_TEXT="Updated by workflow run $GITHUB_RUN_ID on $(date -u --iso-8601=seconds) (pr #${i})"
            awk -v n="$RANDLINE" -v txt="$NEW_TEXT" 'NR==n{$0=txt} {print}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"

            git add "$FILE"
            git commit -m "chore: update $FILE (line $RANDLINE) — auto commit ${i}" || true

            # push branch using PAT
            git push "https://${USER_PAT}@github.com/${OWNER}/${REPO}.git" "$BRANCH" -q

            # create PR into TARGET_BRANCH using PAT
            PR_TITLE="Automated update: ${TS} — ${BRANCH}"
            PR_BODY="This PR updates line ${RANDLINE} of ${FILE}. Created by workflow run ${GITHUB_RUN_ID}."

            PR_JSON=$(curl -s -X POST -H "Authorization: token ${USER_PAT}" -H "Accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/pulls" \
              -d "$(jq -n --arg head "$BRANCH" --arg base "$TARGET_BRANCH" --arg title "$PR_TITLE" --arg body "$PR_BODY" '{head:$head, base:$base, title:$title, body:$body}')" )

            PR_NUMBER=$(echo "$PR_JSON" | jq -r '.number')
            PR_URL=$(echo "$PR_JSON" | jq -r '.html_url')
            if [ "$PR_NUMBER" = "null" ] || [ -z "$PR_NUMBER" ]; then
              echo "Failed to create PR for branch $BRANCH. Response:"
              echo "$PR_JSON"
              exit 1
            fi
            echo "Created PR #$PR_NUMBER -> $PR_URL"

            # Approve the PR using your PAT (counts as your review)
            REVIEW_BODY="Automated approval by PAT owner: approving this small automated change."
            curl -s -X POST -H "Authorization: token ${USER_PAT}" -H "Accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/reviews" \
              -d "$(jq -n --arg body "$REVIEW_BODY" --arg event "APPROVE" '{body:$body, event:$event}')" >/dev/null

            echo "Posted approval review on PR #${PR_NUMBER}."

            # wait before merging
            echo "Waiting ${MERGE_DELAY}s before merging PR #${PR_NUMBER}..."
            sleep "${MERGE_DELAY}"

            # Merge the PR into TARGET_BRANCH
            MERGE_JSON=$(curl -s -X PUT -H "Authorization: token ${USER_PAT}" -H "Accept: application/vnd.github+json" \
              "${API}/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/merge" \
              -d '{"merge_method":"merge"}')

            MERGED=$(echo "$MERGE_JSON" | jq -r '.merged')
            if [ "$MERGED" = "true" ]; then
              echo "PR #${PR_NUMBER} merged successfully into ${TARGET_BRANCH}."

              # delete remote branch (source)
              curl -s -X DELETE -H "Authorization: token ${USER_PAT}" -H "Accept: application/vnd.github+json" \
                "${API}/repos/${OWNER}/${REPO}/git/refs/heads/${BRANCH}" >/dev/null || true
              echo "Deleted branch ${BRANCH}"
            else
              echo "Merge returned: $MERGE_JSON"
            fi

            # switch back to target branch for next iteration
            git checkout "$TARGET_BRANCH" || git checkout -b "$TARGET_BRANCH"
            git fetch origin "$TARGET_BRANCH":"$TARGET_BRANCH" --depth=1 || true

            # wait between PRs
            echo "Waiting ${PR_INTERVAL}s before next PR..."
            sleep "${PR_INTERVAL}"
          done

          echo "Finished creating and merging $COUNT PR(s) into ${TARGET_BRANCH}."
